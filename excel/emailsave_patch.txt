Option Explicit

'=================================================================================================
' PART 1: MAIN EMAIL GENERATOR
' This section goes into Module1.
'=================================================================================================
Sub GenerateEmail_Final()
    ' --- CONFIGURATION ---
    Const INPUT_SHEET As String = "Input"
    Const TEMPLATE_SHEET As String = "Templates"
    Const RECIPIENT_SHEET As String = "RecipientGroup"
    Const STORAGE_SHEET As String = "Storage"

    ' --- DECLARATIONS ---
    Dim olApp As Object, olMail As Object
    Dim wsInput As Worksheet, wsTemplates As Worksheet, wsRecipients As Worksheet, wsStorage As Worksheet
    Dim selectedTemplate As String, selectedGroup As String, htmlBody As String, tempFolderPath As String
    
    On Error GoTo ErrorHandler

    ' --- INITIALIZE ---
    Set wsInput = ThisWorkbook.Sheets(INPUT_SHEET)
    Set wsTemplates = ThisWorkbook.Sheets(TEMPLATE_SHEET)
    Set wsRecipients = ThisWorkbook.Sheets(RECIPIENT_SHEET)
    Set wsStorage = ThisWorkbook.Sheets(STORAGE_SHEET)

    ' --- 1. GET SELECTIONS FROM INPUT SHEET ---
    selectedTemplate = wsInput.Range("B2").Value ' CORRECTED REFERENCE
    selectedGroup = wsInput.Range("B3").Value   ' CORRECTED REFERENCE
    If selectedTemplate = "" Or selectedGroup = "" Then
        MsgBox "Template (B2) and Recipient Group (B3) must be selected.", vbExclamation
        Exit Sub
    End If
    
    ' --- 2. LOAD TEMPLATE & RECIPIENT DATA ---
    Dim templateRow As Range, recipientRow As Range
    Set templateRow = wsTemplates.Range("A:A").Find(selectedTemplate, LookIn:=xlValues, lookat:=xlWhole)
    Set recipientRow = wsRecipients.Range("A:A").Find(selectedGroup, LookIn:=xlValues, lookat:=xlWhole)

    If templateRow Is Nothing Then
        MsgBox "Template '" & selectedTemplate & "' not found in 'Templates' sheet.", vbCritical
        Exit Sub
    End If
    If recipientRow Is Nothing Then
        MsgBox "Recipient Group '" & selectedGroup & "' not found in 'RecipientGroup' sheet.", vbCritical
        Exit Sub
    End If
    
    htmlBody = wsTemplates.Cells(templateRow.Row, "C").Value ' Column C: HTMLBody
    If Trim(htmlBody) = "" Then
        MsgBox "The HTMLBody for template '" & selectedTemplate & "' is empty.", vbCritical
        Exit Sub
    End If

    ' --- 3. CREATE OUTLOOK ITEM ---
    On Error Resume Next
    Set olApp = GetObject(, "Outlook.Application")
    If olApp Is Nothing Then Set olApp = CreateObject("Outlook.Application")
    On Error GoTo ErrorHandler
    Set olMail = olApp.CreateItem(0)

    ' --- 4. PRE-LOAD BODY & RECIPIENTS ---
    With olMail
        .To = wsRecipients.Cells(recipientRow.Row, "B").Value
        .CC = wsRecipients.Cells(recipientRow.Row, "C").Value
        .Subject = wsTemplates.Cells(templateRow.Row, "B").Value
        .HTMLBody = htmlBody
    End With
    
    ' --- 5. PROCESS & EMBED IMAGES ---
    Dim fileSystem As Object
    Set fileSystem = CreateObject("Scripting.FileSystemObject")
    tempFolderPath = Environ("TEMP") & "\" & fileSystem.GetTempName
    fileSystem.CreateFolder tempFolderPath

    Dim storageTable As ListObject, storageRow As ListRow
    Set storageTable = wsStorage.ListObjects("StorageTable")
    
    For Each storageRow In storageTable.ListRows
        If storageRow.Range(1).Value = selectedTemplate Then
            Dim imageCID As String, imageShapeName As String, tempFilePath As String
            Dim imageShape As Shape, chartObj As ChartObject
            
            imageCID = storageRow.Range(2).Value
            imageShapeName = storageRow.Range(3).Value
            
            On Error Resume Next
            Set imageShape = wsStorage.Shapes(imageShapeName)
            If Err.Number = 0 Then
                tempFilePath = tempFolderPath & "\" & imageShapeName & ".png"
                imageShape.CopyPicture Appearance:=xlScreen, Format:=xlPicture
                Set chartObj = wsStorage.ChartObjects.Add(0, 0, imageShape.Width, imageShape.Height)
                chartObj.Chart.Paste
                chartObj.Chart.Export Filename:=tempFilePath, Filtername:="PNG"
                chartObj.Delete
                
                olMail.Attachments.Add(tempFilePath).PropertyAccessor.SetProperty "http://schemas.microsoft.com/mapi/proptag/0x3712001F", imageCID
            Else
                Debug.Print "Warning: Image shape '" & imageShapeName & "' not found on Storage sheet."
                Err.Clear
            End If
            On Error GoTo ErrorHandler
            Set imageShape = Nothing
        End If
    Next storageRow

    ' --- 6. REPLACE TEXT PLACEHOLDERS ---
    Dim inputTable As ListObject, i As Long
    Set inputTable = wsInput.ListObjects("InputTable")
    For i = 1 To inputTable.ListRows.Count
        Dim placeholder As String, replacementValue As String
        placeholder = inputTable.DataBodyRange(i, 1).Value
        replacementValue = inputTable.DataBodyRange(i, 2).Value
        olMail.HTMLBody = Replace(olMail.HTMLBody, placeholder, replacementValue, 1, -1, vbTextCompare)
    Next i

    ' --- 7. DISPLAY FINAL EMAIL ---
    olMail.Display
    
Cleanup:
    On Error Resume Next
    If Not fileSystem Is Nothing And tempFolderPath <> "" Then
        If fileSystem.FolderExists(tempFolderPath) Then fileSystem.DeleteFolder tempFolderPath, True
    End If
    Set olMail = Nothing: Set olApp = Nothing: Set fileSystem = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "A critical error occurred:" & vbCrLf & "Error #" & Err.Number & " - " & Err.Description, vbCritical
    GoTo Cleanup
End Sub


'=================================================================================================
' PART 2: THE "IMPORT EMAIL" CAPTURE TOOL
' This goes into a SEPARATE Module (e.g., Module2).
'=================================================================================================
Sub Capture_Email_Template()
    ' --- CONFIGURATION ---
    Const TEMPLATE_SHEET As String = "Templates"
    Const STORAGE_SHEET As String = "Storage"
    Const TEMPLATE_FIELDS_SHEET As String = "TemplateFields"

    ' --- DECLARATIONS ---
    Dim olApp As Object, olMail As Object
    Dim wsTemplates As Worksheet, wsStorage As Worksheet, wsFields As Worksheet
    Dim newTemplateName As String
    
    On Error GoTo ErrorHandler
    
    ' --- 1. GET THE EMAIL FROM OUTLOOK ---
    On Error Resume Next
    Set olApp = GetObject(, "Outlook.Application")
    If olApp Is Nothing Then
        MsgBox "Outlook is not running.", vbCritical
        Exit Sub
    End If
    Set olMail = olApp.ActiveInspector.CurrentItem
    If olMail Is Nothing Then
        MsgBox "Please open or select an email in Outlook before running this tool.", vbExclamation
        Exit Sub
    End If
    On Error GoTo ErrorHandler

    ' --- 2. GET TEMPLATE NAME FROM USER ---
    newTemplateName = InputBox("Enter a unique name for this new template:", "Capture Email Template")
    If Trim(newTemplateName) = "" Then Exit Sub

    ' --- 3. GET WORKSHEETS ---
    Set wsTemplates = ThisWorkbook.Sheets(TEMPLATE_SHEET)
    Set wsStorage = ThisWorkbook.Sheets(STORAGE_SHEET)
    Set wsFields = ThisWorkbook.Sheets(TEMPLATE_FIELDS_SHEET)

    ' --- 4. ADD TO TEMPLATES SHEET ---
    Dim nextTemplateRow As Long
    nextTemplateRow = wsTemplates.Cells(wsTemplates.Rows.Count, "A").End(xlUp).Row + 1
    wsTemplates.Cells(nextTemplateRow, "A").Value = newTemplateName
    wsTemplates.Cells(nextTemplateRow, "B").Value = olMail.Subject
    wsTemplates.Cells(nextTemplateRow, "C").Value = olMail.HTMLBody

    ' --- 5. CAPTURE & STORE EMBEDDED IMAGES ---
    Dim att As Object ' Outlook.Attachment
    Dim storageTable As ListObject
    Set storageTable = wsStorage.ListObjects("StorageTable")
    
    For Each att In olMail.Attachments
        Dim prop As Object ' Outlook.PropertyAccessor
        Dim cid As String
        Set prop = att.PropertyAccessor
        
        On Error Resume Next
        cid = prop.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x3712001F")
        If Err.Number = 0 And cid <> "" Then
            ' This is an embedded image
            Dim tempFilePath As String, imageShape As Shape, newShapeName As String
            tempFilePath = Environ("TEMP") & "\" & att.FileName
            att.SaveAsFile tempFilePath
            
            Set imageShape = wsStorage.Shapes.AddPicture(tempFilePath, msoFalse, msoTrue, 10, 10, -1, -1)
            newShapeName = newTemplateName & "_" & att.FileName
            imageShape.Name = newShapeName
            
            ' Add entry to the StorageTable
            Dim newRow As ListRow
            Set newRow = storageTable.ListRows.Add
            newRow.Range(1).Value = newTemplateName
            newRow.Range(2).Value = cid
            newRow.Range(3).Value = newShapeName
            
            Kill tempFilePath
        End If
        Err.Clear
        On Error GoTo ErrorHandler
    Next att

    ' --- 6. FIND AND LOG PLACEHOLDERS ---
    Dim fieldsTable As ListObject, foundPlaceholders As Object, match As Object
    Set fieldsTable = wsFields.ListObjects("TemplateFieldsTable")
    Set foundPlaceholders = CreateObject("Scripting.Dictionary")
    
    With CreateObject("VBScript.RegExp")
        .Global = True
        .Pattern = "\[(.*?)\]" ' Finds any text inside square brackets []
        For Each match In .Execute(olMail.HTMLBody)
            If Not foundPlaceholders.Exists(match.Value) Then
                foundPlaceholders.Add match.Value, 1
                Dim newFieldRow As ListRow
                Set newFieldRow = fieldsTable.ListRows.Add
                newFieldRow.Range(1).Value = newTemplateName
                newFieldRow.Range(2).Value = match.Value
            End If
        Next
    End With

    MsgBox "Template '" & newTemplateName & "' has been successfully captured and added to the system.", vbInformation
    Exit Sub

ErrorHandler:
    MsgBox "An error occurred during capture:" & vbCrLf & "Error #" & Err.Number & " - " & Err.Description, vbCritical
End Sub


'=================================================================================================
' PART 3: INPUT SHEET EVENT HANDLER
' CUT this subroutine and PASTE it into the "Input" sheet's code window.
'=================================================================================================
Private Sub Worksheet_Change(ByVal Target As Range)
    ' This code runs AUTOMATICALLY when the template dropdown in B2 is changed.
    
    ' Only run if the changed cell is B2
    If Target.Address <> Me.Range("B2").Address Then Exit Sub ' CORRECTED REFERENCE
    
    Application.EnableEvents = False ' Prevent infinite loops
    On Error GoTo CleanExit
    
    Dim selectedTemplate As String
    selectedTemplate = Me.Range("B2").Value ' CORRECTED REFERENCE
    
    Dim inputTable As ListObject
    Set inputTable = Me.ListObjects("InputTable")
    
    ' Clear existing data from the input table
    If inputTable.ListRows.Count > 0 Then
        inputTable.DataBodyRange.Delete
    End If
    
    ' Exit if no template is selected
    If selectedTemplate = "" Then GoTo CleanExit
    
    ' Find and populate the table with fields from the "TemplateFields" sheet
    Dim wsFields As Worksheet, fieldsTable As ListObject, fieldRow As ListRow
    Set wsFields = ThisWorkbook.Sheets("TemplateFields")
    Set fieldsTable = wsFields.ListObjects("TemplateFieldsTable")
    
    For Each fieldRow In fieldsTable.ListRows
        If fieldRow.Range(1).Value = selectedTemplate Then
            ' Add a new row to the InputTable and write the placeholder name
            inputTable.ListRows.Add.Range(1).Value = fieldRow.Range(2).Value
        End If
    Next fieldRow

CleanExit:
    Application.EnableEvents = True ' Re-enable events
End Sub

