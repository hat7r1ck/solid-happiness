Sub Capture_Email_Template()
    ' --- CONFIGURATION ---
    Const TEMPLATE_SHEET As String = "Templates"
    Const TEMPLATE_FIELDS_SHEET As String = "TemplateFields"

    ' --- DECLARATIONS ---
    Dim olApp As Object, olMail As Object, draftsFolder As Object
    Dim wsTemplates As Worksheet, wsFields As Worksheet
    Dim newTemplateName As String
    
    On Error GoTo ErrorHandler
    
    ' --- 1. GET OUTLOOK AND THE DRAFTS FOLDER ---
    On Error Resume Next
    Set olApp = GetObject(, "Outlook.Application")
    If olApp Is Nothing Then
        MsgBox "Outlook is not running.", vbCritical
        Exit Sub
    End If
    On Error GoTo ErrorHandler
    
    Set draftsFolder = olApp.GetNamespace("MAPI").GetDefaultFolder(16) ' olFolderDrafts
    
    ' --- 2. BUILD A LIST OF DRAFTS FOR THE USER TO CHOOSE FROM ---
    Dim draftList As String, i As Long
    i = 1
    draftList = "The following emails were found in your Drafts folder." & vbCrLf & vbCrLf
    
    For Each olMail In draftsFolder.Items
        If TypeName(olMail) = "MailItem" Then
            draftList = draftList & i & ". " & olMail.Subject & vbCrLf
            i = i + 1
        End If
    Next
    
    If i = 1 Then
        MsgBox "No emails found in your Outlook Drafts folder.", vbExclamation
        Exit Sub
    End If
    
    Dim choice As String
    choice = InputBox(draftList, "Select a Draft to Capture", "1")
    If Not IsNumeric(choice) Or choice = "" Then Exit Sub ' User cancelled or entered non-number
    
    ' --- 3. RETRIEVE THE CHOSEN EMAIL ---
    Dim selectedIndex As Long
    selectedIndex = CLng(choice)
    Set olMail = Nothing ' Reset before finding the correct one
    
    i = 1
    Dim item As Object
    For Each item In draftsFolder.Items
        If TypeName(item) = "MailItem" Then
            If i = selectedIndex Then
                Set olMail = item
                Exit For
            End If
            i = i + 1
        End If
    Next
    
    If olMail Is Nothing Then
        MsgBox "Invalid selection. Please run the tool again.", vbCritical
        Exit Sub
    End If

    ' --- 4. GET TEMPLATE NAME FROM USER ---
    newTemplateName = InputBox("Enter a unique name for this new template:", "Capture Email Template", olMail.Subject)
    If Trim(newTemplateName) = "" Then Exit Sub

    ' --- 5. GET WORKSHEETS ---
    Set wsTemplates = ThisWorkbook.Sheets(TEMPLATE_SHEET)
    Set wsFields = ThisWorkbook.Sheets(TEMPLATE_FIELDS_SHEET)

    ' --- 6. ADD TO TEMPLATES SHEET ---
    Dim nextTemplateRow As Long
    nextTemplateRow = wsTemplates.Cells(wsTemplates.Rows.Count, "A").End(xlUp).Row + 1
    wsTemplates.Cells(nextTemplateRow, "A").Value = newTemplateName
    wsTemplates.Cells(nextTemplateRow, "B").Value = olMail.Subject
    wsTemplates.Cells(nextTemplateRow, "C").Value = olMail.HTMLBody

    ' --- 7. CAPTURE & STORE EMBEDDED IMAGES ---
    Dim att As Object, allCIDs As String, allShapeNames As String
    allCIDs = ""
    allShapeNames = ""

    For Each att In olMail.Attachments
        Dim prop As Object, cid As String
        Set prop = att.PropertyAccessor
        On Error Resume Next
        cid = prop.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x3712001F")
        If Err.Number = 0 And cid <> "" Then
            Dim tempFilePath As String, imageShape As Shape, newShapeName As String
            tempFilePath = Environ("TEMP") & "\" & att.FileName
            att.SaveAsFile tempFilePath
            
            Set imageShape = wsTemplates.Shapes.AddPicture(tempFilePath, msoFalse, msoTrue, 10, 10, -1, -1)
            newShapeName = newTemplateName & "_" & Replace(att.FileName, " ", "_")
            imageShape.Name = newShapeName
            
            If allCIDs <> "" Then allCIDs = allCIDs & ", "
            allCIDs = allCIDs & cid
            
            If allShapeNames <> "" Then allShapeNames = allShapeNames & ", "
            allShapeNames = allShapeNames & newShapeName
            
            Kill tempFilePath
        End If
        Err.Clear
        On Error GoTo ErrorHandler
    Next att
    
    wsTemplates.Cells(nextTemplateRow, "D").Value = allCIDs
    wsTemplates.Cells(nextTemplateRow, "E").Value = allShapeNames

    ' --- 8. FIND AND LOG PLACEHOLDERS ---
    Dim fieldsTable As ListObject, foundPlaceholders As Object, match As Object
    Set fieldsTable = wsFields.ListObjects("TemplateFieldsTable")
    Set foundPlaceholders = CreateObject("Scripting.Dictionary")
    
    With CreateObject("VBScript.RegExp")
        .Global = True
        .Pattern = "\[(.*?)\]"
        For Each match In .Execute(olMail.HTMLBody)
            If Not foundPlaceholders.Exists(match.Value) Then
                foundPlaceholders.Add match.Value, 1
                Dim newFieldRow As ListRow
                Set newFieldRow = fieldsTable.ListRows.Add
                newFieldRow.Range(1).Value = newTemplateName
                newFieldRow.Range(2).Value = match.Value
            End If
        Next
    End With

    MsgBox "Template '" & newTemplateName & "' captured.", vbInformation
    Exit Sub

ErrorHandler:
    MsgBox "Capture Error:" & vbCrLf & "Error #" & Err.Number & " - " & Err.Description, vbCritical
End Sub

