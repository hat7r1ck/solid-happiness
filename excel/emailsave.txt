Sub Capture_Email_Template()
    ' --- CONFIGURATION ---
    Const TEMPLATE_SHEET As String = "Templates"
    Const TEMPLATE_FIELDS_SHEET As String = "TemplateFields"

    ' --- DECLARATIONS ---
    Dim olApp As Object, olMail As Object
    Dim wsTemplates As Worksheet, wsFields As Worksheet
    Dim newTemplateName As String, msgFilePath As String
    
    On Error GoTo ErrorHandler
    
    ' --- 1. PROMPT USER TO SELECT THE .MSG FILE ---
    With Application.FileDialog(3) ' msoFileDialogFilePicker
        .Title = "Select the .msg Email Template File"
        .Filters.Clear
        .Filters.Add "Outlook Message Files", "*.msg"
        If .Show = -1 Then
            msgFilePath = .SelectedItems(1)
        Else
            Exit Sub ' User cancelled
        End If
    End With

    ' --- 2. OPEN THE .MSG FILE ---
    On Error Resume Next
    Set olApp = GetObject(, "Outlook.Application")
    If olApp Is Nothing Then
        MsgBox "Outlook is not running. Please start Outlook and try again.", vbCritical
        Exit Sub
    End If
    On Error GoTo ErrorHandler
    
    Set olMail = olApp.Session.OpenSharedItem(msgFilePath)
    
    If olMail Is Nothing Then
        MsgBox "Could not open the selected .msg file.", vbCritical
        Exit Sub
    End If

    ' --- 3. GET TEMPLATE NAME ---
    newTemplateName = InputBox("Enter a unique name for this new template:", "Capture Email Template", olMail.Subject)
    If Trim(newTemplateName) = "" Then
        olMail.Close 1 ' olDiscard
        Exit Sub
    End If

    ' --- 4. GET WORKSHEETS ---
    Set wsTemplates = ThisWorkbook.Sheets(TEMPLATE_SHEET)
    Set wsFields = ThisWorkbook.Sheets(TEMPLATE_FIELDS_SHEET)

    ' --- 5. ADD TO TEMPLATES SHEET ---
    Dim nextTemplateRow As Long
    nextTemplateRow = wsTemplates.Cells(wsTemplates.Rows.Count, "A").End(xlUp).Row + 1
    wsTemplates.Cells(nextTemplateRow, "A").Value = newTemplateName
    wsTemplates.Cells(nextTemplateRow, "B").Value = olMail.Subject
    wsTemplates.Cells(nextTemplateRow, "C").Value = olMail.HTMLBody

    ' --- 6. CAPTURE & STORE IMAGES ---
    Dim att As Object, allCIDs As String, allShapeNames As String
    Dim fileSystem As Object, tempFile As Object
    Set fileSystem = CreateObject("Scripting.FileSystemObject")
    allCIDs = ""
    allShapeNames = ""

    For Each att In olMail.Attachments
        Dim prop As Object, cid As String
        Set prop = att.PropertyAccessor
        On Error Resume Next
        cid = prop.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x3712001F")
        If Err.Number = 0 And cid <> "" Then
            Dim tempFilePath As String, imageShape As Shape, newShapeName As String
            tempFilePath = Environ("TEMP") & "\" & att.FileName
            att.SaveAsFile tempFilePath
            
            Set tempFile = fileSystem.GetFile(tempFilePath)
            If tempFile.Size > 100 Then
                Set imageShape = wsTemplates.Shapes.AddPicture(tempFilePath, msoFalse, msoTrue, 10, 10, -1, -1)
                newShapeName = newTemplateName & "_" & Replace(att.FileName, " ", "_")
                imageShape.Name = newShapeName
                
                If allCIDs <> "" Then allCIDs = allCIDs & ", "
                allCIDs = allCIDs & cid
                
                If allShapeNames <> "" Then allShapeNames = allShapeNames & ", "
                allShapeNames = allShapeNames & newShapeName
            End If
            Kill tempFilePath
        End If
        Err.Clear
        On Error GoTo ErrorHandler
    Next att
    
    wsTemplates.Cells(nextTemplateRow, "D").Value = allCIDs
    wsTemplates.Cells(nextTemplateRow, "E").Value = allShapeNames

    ' --- 7. FIND AND LOG PLACEHOLDERS ---
    Dim fieldsTable As ListObject, foundPlaceholders As Object, match As Object
    Set fieldsTable = wsFields.ListObjects("TemplateFieldsTable")
    Set foundPlaceholders = CreateObject("Scripting.Dictionary")
    
    With CreateObject("VBScript.RegExp")
        .Global = True
        ' *** CRITICAL FIX: This pattern ONLY finds {{Placeholder_Name}} ***
        .Pattern = "\{\{([a-zA-Z0-9_]+?)\}\}"
        
        For Each match In .Execute(olMail.HTMLBody)
            If Not foundPlaceholders.Exists(match.Value) Then
                foundPlaceholders.Add match.Value, 1
                Dim newFieldRow As ListRow
                Set newFieldRow = fieldsTable.ListRows.Add
                newFieldRow.Range(1).Value = newTemplateName
                newFieldRow.Range(2).Value = match.Value
            End If
        Next
    End With
    
    olMail.Close 1 ' olDiscard
    MsgBox "Template '" & newTemplateName & "' captured successfully.", vbInformation
    Exit Sub

ErrorHandler:
    If Not olMail Is Nothing Then olMail.Close 1 ' olDiscard
    MsgBox "Capture Error:" & vbCrLf & "Error #" & Err.Number & " - " & Err.Description, vbCritical
End Sub

