Option Explicit

'==================================================================================================
' MACRO 1: The Template Importer
'==================================================================================================
Sub ImportTemplate()

    Dim olApp As Object, olMail As Object, attachment As Object
    Dim wsTemplates As Worksheet, wsImages As Worksheet, wsInput As Worksheet
    Dim newTemplateName As String, newTemplateSubject As String, newTemplateHTML As String
    Dim nextTemplateRow As Long
    Dim shp As Shape
    Dim tempFilePath As String, msgFilePath As String
    Dim fileSystem As Object
    Dim imageSheetName As String
    
    imageSheetName = "xlInternalImageStore" ' System sheet. You will not see it.
    
    On Error GoTo ErrorHandler

    Set wsInput = ThisWorkbook.Sheets(INPUT_SHEET)
    Set wsTemplates = ThisWorkbook.Sheets(TEMPLATE_SHEET)
    Set fileSystem = CreateObject("Scripting.FileSystemObject")
    
    On Error Resume Next
    Set wsImages = ThisWorkbook.Sheets(imageSheetName)
    On Error GoTo 0
    If wsImages Is Nothing Then
        Set wsImages = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsImages.Name = imageSheetName
        wsImages.Visible = xlSheetVeryHidden
    End If
    On Error GoTo ErrorHandler
    
    newTemplateName = wsInput.Range("C6").Value ' ASSUMPTION: Name for new template is in C6
    If newTemplateName = "" Then
        MsgBox "Please enter a name for the new template in cell C6 on the 'Input' sheet.", vbExclamation
        Exit Sub
    End If

    With Application.FileDialog(3)
        .Title = "Select the .msg email file to import"
        .Filters.Clear
        .Filters.Add "Outlook Messages", "*.msg"
        If .Show = -1 Then msgFilePath = .SelectedItems(1) Else Exit Sub
    End With

    On Error Resume Next
    Set olApp = GetObject(, "Outlook.Application")
    If olApp Is Nothing Then Set olApp = CreateObject("Outlook.Application")
    On Error GoTo ErrorHandler
    
    Set olMail = olApp.CreateItemFromTemplate(msgFilePath)
    
    newTemplateSubject = olMail.Subject
    newTemplateHTML = olMail.HTMLBody
    
    For Each attachment In olMail.Attachments
        Dim cid As String
        On Error Resume Next
        cid = attachment.PropertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x3712001F")
        On Error GoTo ErrorHandler
        
        If cid <> "" Then
            tempFilePath = fileSystem.GetSpecialFolder(2) & "\" & attachment.FileName
            attachment.SaveAsFile tempFilePath
            Set shp = wsImages.Shapes.AddPicture(tempFilePath, msoFalse, msoTrue, 10, 10, -1, -1)
            shp.Name = cid
            fileSystem.DeleteFile tempFilePath
        End If
    Next attachment
    
    nextTemplateRow = wsTemplates.Cells(wsTemplates.Rows.Count, "A").End(xlUp).Row + 1
    wsTemplates.Cells(nextTemplateRow, "A").Value = newTemplateName
    wsTemplates.Cells(nextTemplateRow, "B").Value = newTemplateSubject
    wsTemplates.Cells(nextTemplateRow, "D").Value = newTemplateHTML
    
    MsgBox "Template '" & newTemplateName & "' has been successfully imported.", vbInformation, "Import Complete"
    
CleanExit:
    Set olApp = Nothing
    Set olMail = Nothing
    Set attachment = Nothing
    Set fileSystem = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "An import error occurred." & vbCrLf & vbCrLf & "Error #: " & Err.Number & vbCrLf & "Description: " & Err.Description, vbCritical, "VBA Error"
    GoTo CleanExit
    
End Sub

'==================================================================================================
' MACRO 2: The Email Generator
'==================================================================================================
Sub GenerateEmail()

    Dim olApp As Object, olMail As Object
    Dim wsInput As Worksheet, wsTemplates As Worksheet, wsImages As Worksheet, wsRecipients As Worksheet, wsPlaceholders As Worksheet
    Dim selectedTemplate As String, emailSubject As String, emailTo As String, emailCc As String, htmlBody As String, recipientGroup As String
    Dim templateRow As Long, recipientRow As Long, lastPlaceholderRow As Long, i As Long
    Dim shp As Shape, chartObj As ChartObject
    Dim tempFilePath As String, tempFileName As String
    Dim fileSystem As Object
    Dim imageSheetName As String
    
    imageSheetName = "xlInternalImageStore"
    
    On Error GoTo GenerateErrorHandler

    Set wsInput = ThisWorkbook.Sheets(INPUT_SHEET)
    Set wsTemplates = ThisWorkbook.Sheets(TEMPLATE_SHEET)
    Set wsRecipients = ThisWorkbook.Sheets(RECIPIENT_SHEET)
    Set wsPlaceholders = ThisWorkbook.Sheets(PLACEHOLDER_SHEET) ' Set the placeholder sheet
    
    On Error Resume Next
    Set wsImages = ThisWorkbook.Sheets(imageSheetName)
    On Error GoTo GenerateErrorHandler
    If wsImages Is Nothing Then
        MsgBox "No templates imported. Use the 'Import Template' button first.", vbCritical, "System Not Ready"
        Exit Sub
    End If
    
    selectedTemplate = wsInput.Range("B3").Value ' Reads Template from B3
    recipientGroup = wsInput.Range("B4").Value ' Reads Recipient Group from B4
    
    If IsEmpty(selectedTemplate) Then
        MsgBox "Please select a template in cell B3.", vbExclamation, "Template Not Selected"
        Exit Sub
    End If
    If IsEmpty(recipientGroup) Then
        MsgBox "Please select a recipient group in cell B4.", vbExclamation, "Recipient Group Not Selected"
        Exit Sub
    End If

    On Error Resume Next
    templateRow = Application.Match(selectedTemplate, wsTemplates.Columns("A"), 0)
    On Error GoTo GenerateErrorHandler
    If templateRow = 0 Then
        MsgBox "Template '" & selectedTemplate & "' not found in 'Templates' sheet.", vbCritical, "Template Mismatch"
        Exit Sub
    End If
    
    emailSubject = wsTemplates.Cells(templateRow, "B").Value
    emailCc = wsTemplates.Cells(templateRow, "C").Value
    htmlBody = wsTemplates.Cells(templateRow, "D").Value

    On Error Resume Next
    recipientRow = Application.Match(recipientGroup, wsRecipients.Columns("A"), 0)
    On Error GoTo GenerateErrorHandler
    If recipientRow > 0 Then emailTo = wsRecipients.Cells(recipientRow, "B").Value Else emailTo = ""
    
    On Error Resume Next
    Set olApp = GetObject(, "Outlook.Application")
    If olApp Is Nothing Then Set olApp = CreateObject("Outlook.Application")
    On Error GoTo GenerateErrorHandler
    Set olMail = olApp.CreateItem(0)

    Set fileSystem = CreateObject("Scripting.FileSystemObject")
    If wsImages.Shapes.Count > 0 Then
        For Each shp In wsImages.Shapes
            tempFileName = shp.Name & ".png"
            tempFilePath = fileSystem.GetSpecialFolder(2) & "\" & tempFileName
            
            Set chartObj = wsImages.ChartObjects.Add(0, 0, shp.Width, shp.Height)
            chartObj.Activate
            shp.Copy
            chartObj.Chart.Paste
            chartObj.Chart.Export Filename:=tempFilePath, Filtername:="PNG"
            chartObj.Delete
            
            Dim attachment As Object
            Set attachment = olMail.Attachments.Add(tempFilePath)
            attachment.PropertyAccessor.SetProperty "http://schemas.microsoft.com/mapi/proptag/0x3712001F", shp.Name
            
            fileSystem.DeleteFile tempFilePath, True
        Next shp
    End If

    ' --- CORRECTED: Reads from the dedicated "Placeholders" sheet and filters by selected template ---
    lastPlaceholderRow = wsPlaceholders.Cells(wsPlaceholders.Rows.Count, "A").End(xlUp).Row
    For i = 2 To lastPlaceholderRow
        If wsPlaceholders.Cells(i, "A").Value = selectedTemplate Then
            Dim placeholder As String, replacementValue As String
            placeholder = wsPlaceholders.Cells(i, "B").Value
            replacementValue = wsPlaceholders.Cells(i, "C").Value
            If placeholder <> "" Then htmlBody = Replace(htmlBody, placeholder, replacementValue)
        End If
    Next i

    With olMail
        .To = emailTo
        .CC = emailCc
        .Subject = emailSubject
        .HTMLBody = htmlBody
        .Display
    End With

    MsgBox "Email '" & selectedTemplate & "' has been generated.", vbInformation, "Success"

GenerateCleanExit:
    Set olMail = Nothing
    Set olApp = Nothing
    Set fileSystem = Nothing
    Exit Sub

GenerateErrorHandler:
    MsgBox "An error occurred." & vbCrLf & vbCrLf & "Error #: " & Err.Number & vbCrLf & "Description: " & Err.Description, vbCritical, "VBA Error"
    GoTo GenerateCleanExit
End Sub

