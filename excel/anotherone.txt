Option Explicit

'=================================================================================================
' PART 1: UTILITY & MAIN GENERATOR
' This code goes into a standard module (e.g., Module1).
'=================================================================================================

' First Aid Tool: Run this if the Input sheet ever stops responding.
Sub Force_Enable_Events()
    Application.EnableEvents = True
    MsgBox "Events have been re-enabled.", vbInformation
End Sub

' Main Engine: This is for the "Generate Email" button.
Sub GenerateEmail_Final()
    ' --- CONFIGURATION ---
    Const INPUT_SHEET As String = "Input"
    Const TEMPLATE_SHEET As String = "Templates"
    Const RECIPIENT_SHEET As String = "RecipientGroup"

    ' --- DECLARATIONS ---
    Dim olApp As Object, olMail As Object
    Dim wsInput As Worksheet, wsTemplates As Worksheet, wsRecipients As Worksheet
    Dim selectedTemplate As String, selectedGroup As String, recipientPlacement As String, recipientList As String, htmlBody As String, tempFolderPath As String
    
    On Error GoTo ErrorHandler

    ' --- INITIALIZE ---
    Set wsInput = ThisWorkbook.Sheets(INPUT_SHEET)
    Set wsTemplates = ThisWorkbook.Sheets(TEMPLATE_SHEET)
    Set wsRecipients = ThisWorkbook.Sheets(RECIPIENT_SHEET)

    ' --- 1. GET SELECTIONS ---
    selectedTemplate = wsInput.Range("B2").Value
    selectedGroup = wsInput.Range("B3").Value
    recipientPlacement = wsInput.Range("C4").Value
    
    If selectedTemplate = "" Or selectedGroup = "" Or recipientPlacement = "" Then
        MsgBox "Template (B2), Recipient Group (B3), and Placement (C4) must be selected.", vbExclamation
        Exit Sub
    End If
    
    ' --- 2. LOAD DATA ---
    Dim templateRow As Range, recipientRow As Range
    Set templateRow = wsTemplates.Range("A:A").Find(selectedTemplate, LookIn:=xlValues, lookat:=xlWhole)
    Set recipientRow = wsRecipients.Range("A:A").Find(selectedGroup, LookIn:=xlValues, lookat:=xlWhole)

    If templateRow Is Nothing Then MsgBox "Template '" & selectedTemplate & "' not found.", vbCritical: Exit Sub
    If recipientRow Is Nothing Then MsgBox "Recipient Group '" & selectedGroup & "' not found.", vbCritical: Exit Sub
    
    htmlBody = wsTemplates.Cells(templateRow.Row, "C").Value
    recipientList = wsRecipients.Cells(recipientRow.Row, "B").Value
    recipientList = Replace(recipientList, ",", ";") ' Handle comma-separated lists
    
    If Trim(htmlBody) = "" Then MsgBox "The HTMLBody for template '" & selectedTemplate & "' is empty.", vbCritical: Exit Sub

    ' --- 3. CREATE OUTLOOK ITEM ---
    On Error Resume Next
    Set olApp = GetObject(, "Outlook.Application")
    If Err.Number <> 0 Then
        Err.Clear
        Set olApp = CreateObject("Outlook.Application")
    End If
    On Error GoTo ErrorHandler
    If olApp Is Nothing Then MsgBox "Could not start or connect to Outlook.", vbCritical: Exit Sub
    Set olMail = olApp.CreateItem(0)

    ' --- 4. PRE-LOAD BODY & ASSIGN RECIPIENTS ---
    With olMail
        Select Case UCase(recipientPlacement)
            Case "TO"
                .To = recipientList
            Case "CC"
                .CC = recipientList
            Case "BCC"
                .BCC = recipientList
        End Select
        
        .Subject = wsTemplates.Cells(templateRow.Row, "B").Value
        .HTMLBody = htmlBody
    End With
    
    ' --- 5. PROCESS & EMBED IMAGES ---
    Dim fileSystem As Object
    Set fileSystem = CreateObject("Scripting.FileSystemObject")
    tempFolderPath = Environ("TEMP") & "\" & fileSystem.GetTempName
    fileSystem.CreateFolder tempFolderPath

    Dim imageCIDs As Variant, imageShapeNames As Variant, i As Long
    imageCIDs = Split(wsTemplates.Cells(templateRow.Row, "D").Value, ",")
    imageShapeNames = Split(wsTemplates.Cells(templateRow.Row, "E").Value, ",")

    If UBound(imageCIDs) = UBound(imageShapeNames) Then
        For i = 0 To UBound(imageCIDs)
            Dim imageCID As String, imageShapeName As String
            imageCID = Trim(imageCIDs(i))
            imageShapeName = Trim(imageShapeNames(i))
            
            If imageCID <> "" And imageShapeName <> "" Then
                Dim imageShape As Shape, chartObj As ChartObject, tempFilePath As String
                On Error Resume Next
                Set imageShape = wsTemplates.Shapes(imageShapeName)
                If Err.Number = 0 Then
                    tempFilePath = tempFolderPath & "\" & imageShapeName & ".png"
                    imageShape.CopyPicture Appearance:=xlScreen, Format:=xlPicture
                    Set chartObj = wsTemplates.ChartObjects.Add(0, 0, imageShape.Width, imageShape.Height)
                    chartObj.Chart.Paste
                    chartObj.Chart.Export Filename:=tempFilePath, Filtername:="PNG"
                    chartObj.Delete
                    olMail.Attachments.Add(tempFilePath).PropertyAccessor.SetProperty "http://schemas.microsoft.com/mapi/proptag/0x3712001F", imageCID
                Else
                    Debug.Print "Warning: Image shape '" & imageShapeName & "' not found on Templates sheet."
                    Err.Clear
                End If
                On Error GoTo ErrorHandler
            End If
        Next i
    End If

    ' --- 6. REPLACE TEXT PLACEHOLDERS ---
    Dim inputTable As ListObject
    If wsInput.ListObjects.Count = 0 Then
        MsgBox "FATAL ERROR: No table found on the 'Input' sheet for placeholders.", vbCritical
        Exit Sub
    End If
    Set inputTable = wsInput.ListObjects(1) ' Find the first table, regardless of name.
    
    For i = 1 To inputTable.ListRows.Count
        Dim placeholder As String, replacementValue As String
        placeholder = inputTable.DataBodyRange(i, 1).Value
        replacementValue = inputTable.DataBodyRange(i, 2).Value
        olMail.HTMLBody = Replace(olMail.HTMLBody, placeholder, replacementValue, 1, -1, vbTextCompare)
    Next i

    ' --- 7. DISPLAY FINAL EMAIL ---
    olMail.Display
    
Cleanup:
    On Error Resume Next
    If Not fileSystem Is Nothing And tempFolderPath <> "" Then
        If fileSystem.FolderExists(tempFolderPath) Then fileSystem.DeleteFolder tempFolderPath, True
    End If
    Set olMail = Nothing: Set olApp = Nothing: Set fileSystem = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "A critical error occurred:" & vbCrLf & "Error #" & Err.Number & " - " & Err.Description, vbCritical
    GoTo Cleanup
End Sub


'=================================================================================================
' PART 2: THE "IMPORT EMAIL" CAPTURE TOOL
' This code goes into a SEPARATE standard module (e.g., Module2).
'=================================================================================================
Sub Capture_Email_Template()
    ' --- CONFIGURATION ---
    Const TEMPLATE_SHEET As String = "Templates"
    Const TEMPLATE_FIELDS_SHEET As String = "TemplateFields"

    ' --- DECLARATIONS ---
    Dim olApp As Object, olMail As Object
    Dim wsTemplates As Worksheet, wsFields As Worksheet
    Dim newTemplateName As String, msgFilePath As String
    
    On Error GoTo ErrorHandler
    
    ' --- 1. PROMPT USER TO SELECT THE .MSG FILE ---
    With Application.FileDialog(3) ' msoFileDialogFilePicker
        .Title = "Select the .msg Email Template File"
        .Filters.Clear
        .Filters.Add "Outlook Message Files", "*.msg"
        If .Show = -1 Then msgFilePath = .SelectedItems(1) Else Exit Sub
    End With

    ' --- 2. OPEN THE .MSG FILE ---
    On Error Resume Next
    Set olApp = GetObject(, "Outlook.Application")
    If Err.Number <> 0 Then
        Err.Clear
        Set olApp = CreateObject("Outlook.Application")
    End If
    On Error GoTo ErrorHandler
    If olApp Is Nothing Then MsgBox "Could not start or connect to Outlook.", vbCritical: Exit Sub
    
    Set olMail = olApp.Session.OpenSharedItem(msgFilePath)
    If olMail Is Nothing Then MsgBox "Could not open the selected .msg file.", vbCritical: Exit Sub

    ' --- 3. GET TEMPLATE NAME ---
    newTemplateName = InputBox("Enter a unique name for this new template:", "Capture Email Template", olMail.Subject)
    If Trim(newTemplateName) = "" Then olMail.Close 1: Exit Sub

    ' --- 4. GET WORKSHEETS ---
    Set wsTemplates = ThisWorkbook.Sheets(TEMPLATE_SHEET)
    Set wsFields = ThisWorkbook.Sheets(TEMPLATE_FIELDS_SHEET)

    ' --- 5. ADD TO TEMPLATES SHEET ---
    Dim nextTemplateRow As Long
    nextTemplateRow = wsTemplates.Cells(wsTemplates.Rows.Count, "A").End(xlUp).Row + 1
    wsTemplates.Cells(nextTemplateRow, "A").Value = newTemplateName
    wsTemplates.Cells(nextTemplateRow, "B").Value = olMail.Subject
    wsTemplates.Cells(nextTemplateRow, "C").Value = olMail.HTMLBody

    ' --- 6. CAPTURE & STORE IMAGES ---
    Dim att As Object, allCIDs As String, allShapeNames As String
    Dim fileSystem As Object, tempFile As Object
    Set fileSystem = CreateObject("Scripting.FileSystemObject")
    allCIDs = ""
    allShapeNames = ""

    For Each att In olMail.Attachments
        Dim prop As Object, cid As String
        Set prop = att.PropertyAccessor
        On Error Resume Next
        cid = prop.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x3712001F")
        If Err.Number = 0 And cid <> "" Then
            Dim tempFilePath As String, imageShape As Shape, newShapeName As String
            tempFilePath = Environ("TEMP") & "\" & att.FileName
            att.SaveAsFile tempFilePath
            Set tempFile = fileSystem.GetFile(tempFilePath)
            If tempFile.Size > 100 Then
                Set imageShape = wsTemplates.Shapes.AddPicture(tempFilePath, msoFalse, msoTrue, 10, 10, -1, -1)
                newShapeName = newTemplateName & "_" & Replace(att.FileName, " ", "_")
                imageShape.Name = newShapeName
                If allCIDs <> "" Then allCIDs = allCIDs & ", "
                allCIDs = allCIDs & cid
                If allShapeNames <> "" Then allShapeNames = allShapeNames & ", "
                allShapeNames = allShapeNames & newShapeName
            End If
            Kill tempFilePath
        End If
        Err.Clear
        On Error GoTo ErrorHandler
    Next att
    
    wsTemplates.Cells(nextTemplateRow, "D").Value = allCIDs
    wsTemplates.Cells(nextTemplateRow, "E").Value = allShapeNames

    ' --- 7. FIND AND LOG PLACEHOLDERS ---
    Dim fieldsTable As ListObject, foundPlaceholders As Object, match As Object
    If wsFields.ListObjects.Count = 0 Then
        MsgBox "FATAL ERROR: No table found on the 'TemplateFields' sheet.", vbCritical
        olMail.Close 1
        Exit Sub
    End If
    Set fieldsTable = wsFields.ListObjects(1) ' Find table by index, not name
    Set foundPlaceholders = CreateObject("Scripting.Dictionary")
    
    With CreateObject("VBScript.RegExp")
        .Global = True
        .Pattern = "\{\{([^\}]+?)\}\}"
        
        For Each match In .Execute(olMail.HTMLBody)
            Dim rawContent As String, cleanContent As String, finalPlaceholder As String
            rawContent = match.SubMatches(0)
            cleanContent = StripHTMLTags(rawContent)
            finalPlaceholder = "{{" & Trim(cleanContent) & "}}"
            
            If Not foundPlaceholders.Exists(finalPlaceholder) Then
                foundPlaceholders.Add finalPlaceholder, 1
                Dim newFieldRow As ListRow
                Set newFieldRow = fieldsTable.ListRows.Add
                newFieldRow.Range(1).Value = newTemplateName
                newFieldRow.Range(2).Value = finalPlaceholder
            End If
        Next
    End With
    
    olMail.Close 1
    MsgBox "Template '" & newTemplateName & "' captured successfully.", vbInformation
    Exit Sub

ErrorHandler:
    If Not olMail Is Nothing Then olMail.Close 1
    MsgBox "Capture Error:" & vbCrLf & "Error #" & Err.Number & " - " & Err.Description, vbCritical
End Sub

Private Function StripHTMLTags(htmlText As String) As String
    With CreateObject("VBScript.RegExp")
        .Global = True
        .Pattern = "<[^>]+>"
        StripHTMLTags = .Replace(htmlText, "")
    End With
End Function


'=================================================================================================
' PART 3: INPUT SHEET EVENT HANDLER
' This code goes into the "Input" sheet's code window.
'=================================================================================================
Private Sub Worksheet_Change(ByVal Target As Range)
    ' This is the safe, non-destructive version that does not touch formatting.

    If Intersect(Target, Me.Range("B2")) Is Nothing Then Exit Sub
    
    Const PLACEHOLDER_HEADER_ROW As Long = 5
    
    On Error GoTo CleanExit
    Application.EnableEvents = False
    
    Dim selectedTemplate As String
    selectedTemplate = Me.Range("B2").Value
    
    ' Clear ONLY the contents of the old data, below the headers.
    Dim lastDataRow As Long
    lastDataRow = Me.Cells(Me.Rows.Count, "A").End(xlUp).Row
    
    If lastDataRow > PLACEHOLDER_HEADER_ROW Then
        Me.Range("A" & (PLACEHOLDER_HEADER_ROW + 1) & ":B" & lastDataRow).ClearContents
    End If
    
    If selectedTemplate = "" Then GoTo CleanExit
    
    ' Populate the new list.
    Dim wsFields As Worksheet, fieldsTable As ListObject, fieldRow As ListRow
    Dim writeRow As Long
    
    Set wsFields = ThisWorkbook.Sheets("TemplateFields")
    If wsFields.ListObjects.Count = 0 Then
        MsgBox "FATAL ERROR: No table found on 'TemplateFields' sheet.", vbCritical
        GoTo CleanExit
    End If
    Set fieldsTable = wsFields.ListObjects(1) ' Find table by index, not name
    
    writeRow = PLACEHOLDER_HEADER_ROW + 1
    
    For Each fieldRow In fieldsTable.ListRows
        If fieldRow.Range(1).Value = selectedTemplate Then
            Me.Cells(writeRow, "A").Value = fieldRow.Range(2).Value
            writeRow = writeRow + 1
        End If
    Next fieldRow

CleanExit:
    Application.EnableEvents = True
End Sub


-----
Sub GenerateEmail_Final()
    ' --- CONFIGURATION ---
    Const INPUT_SHEET As String = "Input"
    Const TEMPLATE_SHEET As String = "Templates"
    Const RECIPIENT_SHEET As String = "RecipientGroup"

    ' --- DECLARATIONS ---
    Dim olApp As Object, olMail As Object
    Dim wsInput As Worksheet, wsTemplates As Worksheet, wsRecipients As Worksheet
    Dim selectedTemplate As String, selectedGroup As String, recipientPlacement As String, recipientList As String, htmlBody As String, tempFolderPath As String
    
    On Error GoTo ErrorHandler

    ' --- INITIALIZE ---
    Set wsInput = ThisWorkbook.Sheets(INPUT_SHEET)
    Set wsTemplates = ThisWorkbook.Sheets(TEMPLATE_SHEET)
    Set wsRecipients = ThisWorkbook.Sheets(RECIPIENT_SHEET)

    ' --- 1. GET SELECTIONS ---
    selectedTemplate = wsInput.Range("B2").Value
    
    ' *** CRITICAL FIX: ONLY THE TEMPLATE IS REQUIRED ***
    If selectedTemplate = "" Then
        MsgBox "You must select a Template in cell B2.", vbCritical
        Exit Sub
    End If
    
    selectedGroup = wsInput.Range("B3").Value
    recipientPlacement = wsInput.Range("C4").Value
    
    ' --- 2. LOAD TEMPLATE DATA ---
    Dim templateRow As Range
    Set templateRow = wsTemplates.Range("A:A").Find(selectedTemplate, LookIn:=xlValues, lookat:=xlWhole)
    If templateRow Is Nothing Then MsgBox "Template '" & selectedTemplate & "' not found.", vbCritical: Exit Sub
    
    htmlBody = wsTemplates.Cells(templateRow.Row, "C").Value
    If Trim(htmlBody) = "" Then MsgBox "The HTMLBody for template '" & selectedTemplate & "' is empty.", vbCritical: Exit Sub

    ' --- 3. CREATE OUTLOOK ITEM ---
    On Error Resume Next
    Set olApp = GetObject(, "Outlook.Application")
    If Err.Number <> 0 Then
        Err.Clear
        Set olApp = CreateObject("Outlook.Application")
    End If
    On Error GoTo ErrorHandler
    If olApp Is Nothing Then MsgBox "Could not start or connect to Outlook.", vbCritical: Exit Sub
    Set olMail = olApp.CreateItem(0)

    ' --- 4. PRE-LOAD BODY & OPTIONALLY ASSIGN RECIPIENTS ---
    With olMail
        .Subject = wsTemplates.Cells(templateRow.Row, "B").Value
        .HTMLBody = htmlBody
        
        ' This section only runs if a recipient group IS selected.
        If selectedGroup <> "" Then
            Dim recipientRow As Range
            Set recipientRow = wsRecipients.Range("A:A").Find(selectedGroup, LookIn:=xlValues, lookat:=xlWhole)
            
            If Not recipientRow Is Nothing Then
                recipientList = wsRecipients.Cells(recipientRow.Row, "B").Value
                recipientList = Replace(recipientList, ",", ";")
                
                ' Default to "TO" if placement is not specified
                If recipientPlacement = "" Then recipientPlacement = "TO"
                
                Select Case UCase(recipientPlacement)
                    Case "TO"
                        .To = recipientList
                    Case "CC"
                        .CC = recipientList
                    Case "BCC"
                        .BCC = recipientList
                End Select
            Else
                MsgBox "Recipient Group '" & selectedGroup & "' was not found. Continuing without recipients.", vbExclamation
            End If
        End If
    End With
    
    ' --- 5. PROCESS & EMBED IMAGES ---
    Dim fileSystem As Object
    Set fileSystem = CreateObject("Scripting.FileSystemObject")
    tempFolderPath = Environ("TEMP") & "\" & fileSystem.GetTempName
    fileSystem.CreateFolder tempFolderPath

    Dim imageCIDs As Variant, imageShapeNames As Variant, i As Long
    imageCIDs = Split(wsTemplates.Cells(templateRow.Row, "D").Value, ",")
    imageShapeNames = Split(wsTemplates.Cells(templateRow.Row, "E").Value, ",")

    If UBound(imageCIDs) = UBound(imageShapeNames) Then
        For i = 0 To UBound(imageCIDs)
            Dim imageCID As String, imageShapeName As String
            imageCID = Trim(imageCIDs(i))
            imageShapeName = Trim(imageShapeNames(i))
            
            If imageCID <> "" And imageShapeName <> "" Then
                Dim imageShape As Shape, chartObj As ChartObject, tempFilePath As String
                On Error Resume Next
                Set imageShape = wsTemplates.Shapes(imageShapeName)
                If Err.Number = 0 Then
                    tempFilePath = tempFolderPath & "\" & imageShapeName & ".png"
                    imageShape.CopyPicture Appearance:=xlScreen, Format:=xlPicture
                    Set chartObj = wsTemplates.ChartObjects.Add(0, 0, imageShape.Width, imageShape.Height)
                    chartObj.Chart.Paste
                    chartObj.Chart.Export Filename:=tempFilePath, Filtername: "PNG"
                    chartObj.Delete
                    olMail.Attachments.Add(tempFilePath).PropertyAccessor.SetProperty "http://schemas.microsoft.com/mapi/proptag/0x3712001F", imageCID
                Else
                    Debug.Print "Warning: Image shape '" & imageShapeName & "' not found on Templates sheet."
                    Err.Clear
                End If
                On Error GoTo ErrorHandler
            End If
        Next i
    End If

    ' --- 6. REPLACE TEXT PLACEHOLDERS ---
    Dim inputTable As ListObject
    If wsInput.ListObjects.Count = 0 Then
        MsgBox "FATAL ERROR: No table found on the 'Input' sheet for placeholders.", vbCritical
        Exit Sub
    End If
    Set inputTable = wsInput.ListObjects(1)
    
    For i = 1 To inputTable.ListRows.Count
        Dim placeholder As String, replacementValue As String
        placeholder = inputTable.DataBodyRange(i, 1).Value
        replacementValue = inputTable.DataBodyRange(i, 2).Value
        olMail.HTMLBody = Replace(olMail.HTMLBody, placeholder, replacementValue, 1, -1, vbTextCompare)
    Next i

    ' --- 7. DISPLAY FINAL EMAIL ---
    olMail.Display
    
Cleanup:
    On Error Resume Next
    If Not fileSystem Is Nothing And tempFolderPath <> "" Then
        If fileSystem.FolderExists(tempFolderPath) Then fileSystem.DeleteFolder tempFolderPath, True
    End If
    Set olMail = Nothing: Set olApp = Nothing: Set fileSystem = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "A critical error occurred:" & vbCrLf & "Error #" & Err.Number & " - " & Err.Description, vbCritical
    GoTo Cleanup
End Sub


----
Sub GenerateEmail_Final()
    ' --- CONFIGURATION ---
    Const INPUT_SHEET As String = "Input"
    Const TEMPLATE_SHEET As String = "Templates"
    Const RECIPIENT_SHEET As String = "RecipientGroup"

    ' --- DECLARATIONS ---
    Dim olApp As Object, olMail As Object
    Dim wsInput As Worksheet, wsTemplates As Worksheet, wsRecipients As Worksheet
    Dim selectedTemplate As String, selectedGroup As String, recipientList As String, htmlBody As String, tempFolderPath As String
    
    On Error GoTo ErrorHandler

    ' --- INITIALIZE ---
    Set wsInput = ThisWorkbook.Sheets(INPUT_SHEET)
    Set wsTemplates = ThisWorkbook.Sheets(TEMPLATE_SHEET)
    Set wsRecipients = ThisWorkbook.Sheets(RECIPIENT_SHEET)

    ' --- 1. GET SELECTIONS ---
    selectedTemplate = wsInput.Range("B2").Value
    selectedGroup = wsInput.Range("B3").Value ' This is now optional
    
    If selectedTemplate = "" Then
        MsgBox "You must select a Template in cell B2.", vbCritical
        Exit Sub
    End If
    
    ' --- 2. LOAD TEMPLATE DATA ---
    Dim templateRow As Range
    Set templateRow = wsTemplates.Range("A:A").Find(selectedTemplate, LookIn:=xlValues, lookat:=xlWhole)
    If templateRow Is Nothing Then MsgBox "Template '" & selectedTemplate & "' not found.", vbCritical: Exit Sub
    
    htmlBody = wsTemplates.Cells(templateRow.Row, "C").Value
    If Trim(htmlBody) = "" Then MsgBox "The HTMLBody for template '" & selectedTemplate & "' is empty.", vbCritical: Exit Sub

    ' --- 3. CREATE OUTLOOK ITEM ---
    On Error Resume Next
    Set olApp = GetObject(, "Outlook.Application")
    If Err.Number <> 0 Then
        Err.Clear
        Set olApp = CreateObject("Outlook.Application")
    End If
    On Error GoTo ErrorHandler
    If olApp Is Nothing Then MsgBox "Could not start or connect to Outlook.", vbCritical: Exit Sub
    Set olMail = olApp.CreateItem(0)

    ' --- 4. PRE-LOAD BODY & OPTIONALLY ASSIGN RECIPIENTS ---
    With olMail
        .Subject = wsTemplates.Cells(templateRow.Row, "B").Value
        .HTMLBody = htmlBody
        
        ' This section only runs if a recipient group IS selected.
        If selectedGroup <> "" Then
            Dim recipientRow As Range
            Set recipientRow = wsRecipients.Range("A:A").Find(selectedGroup, LookIn:=xlValues, lookat:=xlWhole)
            
            If Not recipientRow Is Nothing Then
                recipientList = wsRecipients.Cells(recipientRow.Row, "B").Value ' Get recipients from Column B
                recipientList = Replace(recipientList, ",", ";") ' Handle commas
                .To = recipientList ' Put them in the TO field by default.
            Else
                MsgBox "Warning: Recipient Group '" & selectedGroup & "' was not found. Continuing without recipients.", vbExclamation
            End If
        End If
    End With
    
    ' --- 5. PROCESS & EMBED IMAGES ---
    Dim fileSystem As Object
    Set fileSystem = CreateObject("Scripting.FileSystemObject")
    tempFolderPath = Environ("TEMP") & "\" & fileSystem.GetTempName
    fileSystem.CreateFolder tempFolderPath

    Dim imageCIDs As Variant, imageShapeNames As Variant, i As Long
    imageCIDs = Split(wsTemplates.Cells(templateRow.Row, "D").Value, ",")
    imageShapeNames = Split(wsTemplates.Cells(templateRow.Row, "E").Value, ",")

    If UBound(imageCIDs) = UBound(imageShapeNames) Then
        For i = 0 To UBound(imageCIDs)
            Dim imageCID As String, imageShapeName As String
            imageCID = Trim(imageCIDs(i))
            imageShapeName = Trim(imageShapeNames(i))
            
            If imageCID <> "" And imageShapeName <> "" Then
                Dim imageShape As Shape, chartObj As ChartObject, tempFilePath As String
                On Error Resume Next
                Set imageShape = wsTemplates.Shapes(imageShapeName)
                If Err.Number = 0 Then
                    tempFilePath = tempFolderPath & "\" & imageShapeName & ".png"
                    imageShape.CopyPicture Appearance:=xlScreen, Format:=xlPicture
                    Set chartObj = wsTemplates.ChartObjects.Add(0, 0, imageShape.Width, imageShape.Height)
                    chartObj.Chart.Paste
                    chartObj.Chart.Export Filename:=tempFilePath, Filtername:="PNG"
                    chartObj.Delete
                    olMail.Attachments.Add(tempFilePath).PropertyAccessor.SetProperty "http://schemas.microsoft.com/mapi/proptag/0x3712001F", imageCID
                Else
                    Debug.Print "Warning: Image shape '" & imageShapeName & "' not found on Templates sheet."
                    Err.Clear
                End If
                On Error GoTo ErrorHandler
            End If
        Next i
    End If

    ' --- 6. REPLACE TEXT PLACEHOLDERS ---
    Dim inputTable As ListObject
    If wsInput.ListObjects.Count = 0 Then
        MsgBox "FATAL ERROR: No table found on the 'Input' sheet for placeholders.", vbCritical
        Exit Sub
    End If
    Set inputTable = wsInput.ListObjects(1)
    
    For i = 1 To inputTable.ListRows.Count
        Dim placeholder As String, replacementValue As String
        placeholder = inputTable.DataBodyRange(i, 1).Value
        replacementValue = inputTable.DataBodyRange(i, 2).Value
        olMail.HTMLBody = Replace(olMail.HTMLBody, placeholder, replacementValue, 1, -1, vbTextCompare)
    Next i

    ' --- 7. DISPLAY FINAL EMAIL ---
    olMail.Display
    
Cleanup:
    On Error Resume Next
    If Not fileSystem Is Nothing And tempFolderPath <> "" Then
        If fileSystem.FolderExists(tempFolderPath) Then fileSystem.DeleteFolder tempFolderPath, True
    End If
    Set olMail = Nothing: Set olApp = Nothing: Set fileSystem = Nothing
    Exit Sub

ErrorHandler:
    MsgBox "A critical error occurred:" & vbCrLf & "Error #" & Err.Number & " - " & Err.Description, vbCritical
    GoTo Cleanup
End Sub
